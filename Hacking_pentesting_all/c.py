def check_for_cycles(node, pairs, visited=set()):
    visited.add(node)
    for parent, child in pairs:
        if parent == node:
            if child in visited or check_for_cycles(child, pairs, visited):
                return True
    visited.remove(node)
    return False

def check_multiple_roots(pairs):

    parent_set = set()
    child_set = set()
    
    for pair in pairs:
        parent, child = pair
        if parent in child_set:
            return True  # Parent already has a child, so multiple roots
        parent_set.add(parent)
        child_set.add(child)
    root_candidates = parent_set - child_set
    if len(root_candidates) != 1:
        return True  # There are multiple roots
    root = root_candidates.pop()
    return not check_for_cycles(root, pairs)  # Check for cycles from the root

def check_children_count(pairs):
    # Create a dictionary to store the children of each parent
    children = {}
    for parent, child in pairs:
        if parent not in children:
            children[parent] = [child]
        else:
            children[parent].append(child)
    
    # Check if any parent has more than two children
    for parent, children_list in children.items():
        if len(children_list) > 2:
            return True
    
    # If no parent has more than two children, return False
    return False
def check_duplicate_pairs(pairs):
    # Create a set to store the pairs as tuples
    pair_set = set()
    
    for pair in pairs:
        pair_tuple = tuple(pair)
        if pair_tuple in pair_set:
            return True
        pair_set.add(pair_tuple)
    return False

def find_roots(pairs):
    # Create a set of all nodes in the tree
    nodes = set()
    for pair in pairs:
        nodes.update(pair)
    print(nodes)
    # Remove children from the set
    for parent, child in pairs:
        nodes.discard(child)
    
    # Return the remaining nodes as the roots of the tree
    return list(nodes)
input_string = "(A,B) (B,C) (A,E) (B,D) (A,K)"
pairs_list = [tuple(pair.strip('()').split(',')) for pair in input_string.split()]

roots = find_roots(pairs_list)
print("Roots =-> ",roots)

duplicat = check_duplicate_pairs(pairs_list)
print("Duplicate-> " ,duplicat)

more_child = check_children_count(pairs_list)
print("More childe " ,more_child)

#  --------
pairs = [('A', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'E'), ('C', 'F')]
has_error = check_multiple_roots(pairs)
print(has_error)  # Output: False

pairs = [('A', 'B'), ('C', 'D'), ('E', 'F'), ('G', 'H')]
has_error = check_multiple_roots(pairs)
print(has_error)  # Output: True
